{:use-macros {testing cljs.test, is cljs.test, deftest cljs.test, use-fixtures cljs.test, run-tests cljs.test}, :excludes #{}, :name mokepon.tests.core, :imports nil, :requires {cljs.test cljs.test, mon mokepon.monsters, mokepon.monsters mokepon.monsters, rpg mokepon.rpg, mokepon.rpg mokepon.rpg, tnr mokepon.container, mokepon.container mokepon.container}, :uses nil, :defs {log {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 9, :column 7, :end-line 9, :end-column 10, :arglists (quote ([o]))}, :name mokepon.tests.core/log, :variadic false, :file "src/mokepon/tests/core.cljs", :end-column 10, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, has-play-by-play {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 31, :column 7, :end-line 31, :end-column 23, :arglists (quote ([message]))}, :name mokepon.tests.core/has-play-by-play, :variadic false, :file "src/mokepon/tests/core.cljs", :end-column 23, :method-params ([message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([message]))}, log-state {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 37, :column 7, :end-line 37, :end-column 16, :arglists (quote ([& path])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(path)], :arglists ([& path]), :arglists-meta (nil)}}, :name mokepon.tests.core/log-state, :variadic true, :file "src/mokepon/tests/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(path)], :arglists ([& path]), :arglists-meta (nil)}, :method-params [(path)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 0, :fn-var true, :arglists ([& path])}, set-cash {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 28, :column 7, :end-line 28, :end-column 15, :arglists (quote ([amount]))}, :name mokepon.tests.core/set-cash, :variadic false, :file "src/mokepon/tests/core.cljs", :end-column 15, :method-params ([amount]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([amount]))}, make-enemy-attack-ready {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 18, :column 7, :end-line 18, :end-column 30, :arglists (quote ([]))}, :name mokepon.tests.core/make-enemy-attack-ready, :variadic false, :file "src/mokepon/tests/core.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, cljs-test-each-fixtures {:name mokepon.tests.core/cljs-test-each-fixtures, :meta {:file nil}, :file "src/mokepon/tests/core.cljs", :line 16, :column 1}, reset-game {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 12, :column 7, :end-line 12, :end-column 17, :arglists (quote ([]))}, :name mokepon.tests.core/reset-game, :variadic false, :file "src/mokepon/tests/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-state {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 34, :column 7, :end-line 34, :end-column 16, :arglists (quote ([& path])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(path)], :arglists ([& path]), :arglists-meta (nil)}}, :name mokepon.tests.core/get-state, :variadic true, :file "src/mokepon/tests/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(path)], :arglists ([& path]), :arglists-meta (nil)}, :method-params [(path)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 0, :fn-var true, :arglists ([& path])}, state {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([]))}, :name mokepon.tests.core/state, :variadic false, :file "src/mokepon/tests/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run-tests {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 40, :column 7, :end-line 40, :end-column 16, :arglists (quote ([]))}, :name mokepon.tests.core/run-tests, :variadic false, :file "src/mokepon/tests/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, make-chosen-attack-ready {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/core.cljs", :line 23, :column 7, :end-line 23, :end-column 31, :arglists (quote ([]))}, :name mokepon.tests.core/make-chosen-attack-ready, :variadic false, :file "src/mokepon/tests/core.cljs", :end-column 31, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{message :report-counters :ns :each-fixtures :type :play-by-play :battling :cash :summary some :fail :team :end-run-tests not state :at :expected :begin-test-ns :error :pass :actual :before :end-test-ns :chosen-key :test :message mokepon.tests.core}, :order [:before :battling :at :team :chosen-key :cash :type :expected :actual :message :error some message :play-by-play state :pass :fail not :test :summary :ns mokepon.tests.core :begin-test-ns :each-fixtures :end-test-ns :report-counters :end-run-tests]}, :doc nil}