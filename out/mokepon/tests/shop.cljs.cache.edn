{:use-macros {testing cljs.test, is cljs.test, deftest cljs.test, use-fixtures cljs.test, run-tests cljs.test}, :excludes #{}, :name mokepon.tests.shop, :imports nil, :requires {mon mokepon.monsters, mokepon.monsters mokepon.monsters, tnr mokepon.container, mokepon.shop mokepon.shop, rpg mokepon.rpg, cljs.test cljs.test, shp mokepon.shop, mokepon.container mokepon.container, mokepon.rpg mokepon.rpg, mokepon.tests.core mokepon.tests.core}, :uses {log mokepon.tests.core, has-play-by-play mokepon.tests.core, set-cash mokepon.tests.core, make-enemy-attack-ready mokepon.tests.core, reset-game mokepon.tests.core, get-state mokepon.tests.core, make-chosen-attack-ready mokepon.tests.core}, :defs {cljs-test-each-fixtures {:name mokepon.tests.shop/cljs-test-each-fixtures, :meta {:file nil}, :file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/shop.cljs", :line 15, :column 1}, purchasing-item {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/shop.cljs", :line 17, :column 10, :end-line 17, :end-column 25}, :name mokepon.tests.shop/purchasing-item, :variadic false, :file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/shop.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, not-enough-cash-to-buy-item {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/shop.cljs", :line 25, :column 10, :end-line 25, :end-column 37}, :name mokepon.tests.shop/not-enough-cash-to-buy-item, :variadic false, :file "/Users/amiralirajan/Projects/mokepon/src/mokepon/tests/shop.cljs", :end-column 37, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :require-macros {cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{purchasing-item mokepon.tests.shop = :ns :name :file :end-column :type :cash :column get-state zero? :fail tnr/item-count :line not :expected :end-line :mokebox :error :pass :arglists :actual :doc :before mokepon.tests.shop/not-enough-cash-to-buy-item :test not-enough-cash-to-buy-item mokepon.tests.shop/purchasing-item :message}, :order [:before :mokebox :type :expected :actual :message :error = tnr/item-count :pass :fail not zero? get-state :cash mokepon.tests.shop/purchasing-item :ns :name :file :end-column :column :line :end-line :arglists :doc :test mokepon.tests.shop purchasing-item mokepon.tests.shop/not-enough-cash-to-buy-item not-enough-cash-to-buy-item]}, :doc nil}