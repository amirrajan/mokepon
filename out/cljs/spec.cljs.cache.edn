{:use-macros nil, :excludes #{cat * or keys + and def}, :name cljs.spec, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses nil, :defs {t_cljs$spec38604 {:num-fields 10, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec38604, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1034, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, form {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 126, :column 7, :end-line 126, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec/form, :variadic false, :file "out/cljs/spec.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, t_cljs$spec38263 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38263, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 610, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *recursion-limit* {:name cljs.spec/*recursion-limit*, :file "out/cljs/spec.cljs", :line 19, :column 1, :end-line 19, :end-column 33, :dynamic true, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 19, :column 16, :end-line 19, :end-column 33, :dynamic true}, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, t_cljs$spec38256 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38256, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 610, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec38210 {:num-fields 6, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38210, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 471, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, op-explain {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 859, :column 8, :end-line 859, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec/op-explain, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 859, :end-line 859, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, alt-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 743, :column 19, :end-line 743, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec/alt-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 743, :end-line 743, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 590, :column 8, :end-line 590, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec/tagged-ret, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 590, :end-line 590, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, def-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 238, :column 19, :end-line 238, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec/def-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, unstrument* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 337, :column 7, :end-line 337, :end-column 18, :arglists (quote ([v]))}, :name cljs.spec/unstrument*, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 337, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, regex-spec-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 986, :column 19, :end-line 986, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec/regex-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 986, :end-line 986, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, explain-data* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 161, :column 7, :end-line 161, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec/explain-data*, :variadic false, :file "out/cljs/spec.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 810, :column 8, :end-line 810, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec/add-ret, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 810, :end-line 810, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 647, :column 8, :end-line 647, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec/explain-pred-list, :variadic false, :file "out/cljs/spec.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 647, :end-line 647, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, alt2 {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 741, :column 8, :end-line 741, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec/alt2, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 741, :end-line 741, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, inst-in-range? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 1103, :column 7, :end-line 1103, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec/inst-in-range?, :variadic false, :file "out/cljs/spec.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1103, :end-line 1103, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec/registry-ref, :file "out/cljs/spec.cljs", :line 45, :column 1, :end-line 45, :end-column 32, :private true, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 45, :column 20, :end-line 45, :end-column 32, :private true}}, accept? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 678, :column 8, :end-line 678, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, :private true, :name cljs.spec/accept?, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([p__38365]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 678, :end-line 678, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, and-spec-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 658, :column 19, :end-line 658, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec/and-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 658, :end-line 658, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 676, :column 8, :end-line 676, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/accept, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 676, :end-line 676, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, recur-limit? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 347, :column 8, :end-line 347, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec/recur-limit?, :variadic false, :file "out/cljs/spec.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 347, :end-line 347, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, describe* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 43, :column 4, :end-line 43, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec/Spec, :name cljs.spec/describe*, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, map-spec-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 381, :column 19, :end-line 381, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec/map-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 32, :method-params ([p__38136]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 381, :end-line 381, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, *instrument-enabled* {:meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 33, :column 26, :end-line 33, :end-column 46, :dynamic true, :private true}, :private true, :name cljs.spec/*instrument-enabled*, :file "out/cljs/spec.cljs", :end-column 46, :column 1, :dynamic true, :line 33, :end-line 33, :doc "if false, instrumented fns call straight through"}, reg-resolve! {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 71, :column 8, :end-line 71, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec/reg-resolve!, :variadic false, :file "out/cljs/spec.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, instrumented-vars {:name cljs.spec/instrumented-vars, :file "out/cljs/spec.cljs", :line 320, :column 1, :end-line 320, :end-column 33, :private true, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 320, :column 16, :end-line 320, :end-column 33, :private true}, :doc "Map for instrumented vars to :raw/:wrapped fns"}, re-explain {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 962, :column 8, :end-line 962, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec/re-explain, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 962, :end-line 962, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, t_cljs$spec38362 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38362, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 661, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alts {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 740, :column 8, :end-line 740, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/alts, :variadic true, :file "out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 740, :end-line 740, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, with-name {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 49, :column 8, :end-line 49, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec/with-name, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, t_cljs$spec38169 {:num-fields 20, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38169, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 389, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 206, :column 7, :end-line 206, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec/explain, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 52, :column 8, :end-line 52, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec/spec-name, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec/map-spec, :file "out/cljs/spec.cljs", :line 265, :column 1, :end-line 265, :end-column 18, :declared true, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 265, :column 10, :end-line 265, :end-column 18, :declared true}}, t_cljs$spec38359 {:num-fields 5, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38359, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 661, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, with-gen* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 42, :column 4, :end-line 42, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec/Spec, :name cljs.spec/with-gen*, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, ->t_cljs$spec38610 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta38611])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec38610, :variadic false, :file "out/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta38611]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1034, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta38611])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, ->t_cljs$spec38210 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form pred gfn cpred? unc meta38211])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38210, :variadic false, :file "out/cljs/spec.cljs", :method-params ([form pred gfn cpred? unc meta38211]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 471, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred gfn cpred? unc meta38211])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, spec-checking-fn {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 279, :column 8, :end-line 279, :end-column 24, :private true, :arglists (quote ([v f]))}, :private true, :name cljs.spec/spec-checking-fn, :variadic false, :file "out/cljs/spec.cljs", :end-column 24, :method-params ([v f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v f]))}, or-spec-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 596, :column 19, :end-line 596, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec/or-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 596, :end-line 596, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, ->t_cljs$spec38362 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([and-spec-impl forms preds gfn meta38363])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38362, :variadic false, :file "out/cljs/spec.cljs", :method-params ([and-spec-impl forms preds gfn meta38363]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 661, :max-fixed-arity 5, :fn-var true, :arglists (quote ([and-spec-impl forms preds gfn meta38363])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, specize {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 110, :column 8, :end-line 110, :end-column 15, :private true, :arglists (quote ([s]))}, :private true, :name cljs.spec/specize, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, t_cljs$spec38243 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38243, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 4, :line 539, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *fspec-iterations* {:name cljs.spec/*fspec-iterations*, :file "out/cljs/spec.cljs", :line 25, :column 1, :end-line 25, :end-column 34, :dynamic true, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 25, :column 16, :end-line 25, :end-column 34, :dynamic true}, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 37, :column 14, :end-line 37, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec/Spec, :file "out/cljs/spec.cljs", :end-column 18, :column 1, :line 37, :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 37, :impls #{cljs.spec/t_cljs$spec38169 cljs.spec/t_cljs$spec38139 cljs.spec/t_cljs$spec38359 cljs.spec/t_cljs$spec38243 cljs.spec/t_cljs$spec38225 cljs.spec/t_cljs$spec38604 cljs.spec/t_cljs$spec38610 cljs.spec/t_cljs$spec38591 cljs.spec/t_cljs$spec38594 cljs.spec/t_cljs$spec38210 cljs.spec/t_cljs$spec38256 cljs.spec/t_cljs$spec38263 cljs.spec/t_cljs$spec38362}, :doc nil, :jsdoc ("@interface")}, unform {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 119, :column 7, :end-line 119, :end-column 13, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, :name cljs.spec/unform, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."}, valid? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 367, :column 7, :end-line 367, :end-column 13, :arglists (quote ([spec x] [spec x form])), :doc "Helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}}, :name cljs.spec/valid?, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}, :method-params ([spec x] [spec x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 3, :fn-var true, :arglists ([spec x] [spec x form]), :doc "Helper function that returns true when x is valid for spec."}, coll-checker {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 1082, :column 7, :end-line 1082, :end-column 19, :arglists (quote ([pred])), :doc "returns a predicate function that checks *coll-check-limit* items in a collection with pred"}, :name cljs.spec/coll-checker, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1082, :end-line 1082, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred])), :doc "returns a predicate function that checks *coll-check-limit* items in a collection with pred"}, gen {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 226, :column 7, :end-line 226, :end-column 10, :arglists (quote ([spec] [spec overrides])), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map paths (vectors of keywords) to generators. These will be\n  used instead of the generators at those paths. Note that parent\n  generator (in the spec or overrides map) will supersede those of any\n  subtrees. A generator for a regex op must always return a\n  sequential collection (i.e. a generator for s/? should return either\n  an empty sequence/vector or a sequence/vector with one item in it)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}}, :name cljs.spec/gen, :variadic false, :file "out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}, :method-params ([spec] [spec overrides]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [spec overrides]), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map paths (vectors of keywords) to generators. These will be\n  used instead of the generators at those paths. Note that parent\n  generator (in the spec or overrides map) will supersede those of any\n  subtrees. A generator for a regex op must always return a\n  sequential collection (i.e. a generator for s/? should return either\n  an empty sequence/vector or a sequence/vector with one item in it)"}, ->t_cljs$spec38604 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta38605])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/->t_cljs$spec38604, :variadic false, :file "out/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta38605]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1034, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta38605])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, ->t_cljs$spec38169 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([opt map-spec-impl req-un opt-un gfn p__38136 pred-exprs keys-pred argm opt-keys req-specs keys->specs req map__38167 id req-keys opt-specs k->s pred-forms meta38170])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38169, :variadic false, :file "out/cljs/spec.cljs", :method-params ([opt map-spec-impl req-un opt-un gfn p__38136 pred-exprs keys-pred argm opt-keys req-specs keys->specs req map__38167 id req-keys opt-specs k->s pred-forms meta38170]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 389, :max-fixed-arity 20, :fn-var true, :arglists (quote ([opt map-spec-impl req-un opt-un gfn p__38136 pred-exprs keys-pred argm opt-keys req-specs keys->specs req map__38167 id req-keys opt-specs k->s pred-forms meta38170])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, unform* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 39, :column 4, :end-line 39, :end-column 11, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec y]))}, :protocol cljs.spec/Spec, :name cljs.spec/unform*, :variadic false, :file "out/cljs/spec.cljs", :end-column 11, :method-params ([spec y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec y])), :doc nil}, ->sym {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 253, :column 8, :end-line 253, :end-column 13, :private true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, :private true, :name cljs.spec/->sym, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, abbrev {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 132, :column 7, :end-line 132, :end-column 13, :arglists (quote ([form]))}, :name cljs.spec/abbrev, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, regex? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 84, :column 7, :end-line 84, :end-column 13, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, :name cljs.spec/regex?, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, no-fn-spec {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 315, :column 8, :end-line 315, :end-column 18, :private true, :arglists (quote ([v specs]))}, :private true, :name cljs.spec/no-fn-spec, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([v specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v specs]))}, expect {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 269, :column 8, :end-line 269, :end-column 14, :private true, :arglists (quote ([spec v])), :doc "Returns nil if v conforms to spec, else throws ex-info with explain-data."}, :private true, :name cljs.spec/expect, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([spec v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec v])), :doc "Returns nil if v conforms to spec, else throws ex-info with explain-data."}, ->t_cljs$spec38594 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([regex-spec-impl re gfn meta38595])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38594, :variadic false, :file "out/cljs/spec.cljs", :method-params ([regex-spec-impl re gfn meta38595]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 989, :max-fixed-arity 4, :fn-var true, :arglists (quote ([regex-spec-impl re gfn meta38595])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, int-in-range? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 1110, :column 7, :end-line 1110, :end-column 20, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, :name cljs.spec/int-in-range?, :variadic false, :file "out/cljs/spec.cljs", :end-column 20, :method-params ([start end val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1110, :end-line 1110, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end val])), :doc "Return true if start <= val and val < end"}, dt {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 354, :column 8, :end-line 354, :end-column 10, :private true, :arglists (quote ([pred x form] [pred x form cpred?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/dt, :variadic false, :file "out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}, :method-params ([pred x form] [pred x form cpred?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 354, :end-line 354, :max-fixed-arity 4, :fn-var true, :arglists ([pred x form] [pred x form cpred?])}, ->t_cljs$spec38225 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form mmvar retag gfn id predx dval tag meta38226])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38225, :variadic false, :file "out/cljs/spec.cljs", :method-params ([form mmvar retag gfn id predx dval tag meta38226]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 501, :max-fixed-arity 9, :fn-var true, :arglists (quote ([form mmvar retag gfn id predx dval tag meta38226])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, preturn {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 774, :column 8, :end-line 774, :end-column 15, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/preturn, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 774, :end-line 774, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, ->t_cljs$spec38139 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([opt map-spec-impl req-un opt-un gfn p__38136 pred-exprs keys-pred argm opt-keys req-specs keys->specs req id map__38137 req-keys opt-specs k->s pred-forms meta38140])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38139, :variadic false, :file "out/cljs/spec.cljs", :method-params ([opt map-spec-impl req-un opt-un gfn p__38136 pred-exprs keys-pred argm opt-keys req-specs keys->specs req id map__38137 req-keys opt-specs k->s pred-forms meta38140]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 389, :max-fixed-arity 20, :fn-var true, :arglists (quote ([opt map-spec-impl req-un opt-un gfn p__38136 pred-exprs keys-pred argm opt-keys req-specs keys->specs req id map__38137 req-keys opt-specs k->s pred-forms meta38140])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, re-conform {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 949, :column 8, :end-line 949, :end-column 18, :private true, :arglists (quote ([p [x & xs :as data]]))}, :private true, :name cljs.spec/re-conform, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([p p__38559]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 949, :end-line 949, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [x & xs :as data]]))}, spec? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 79, :column 7, :end-line 79, :end-column 12, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, :name cljs.spec/spec?, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, named? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 47, :column 8, :end-line 47, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/named?, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, t_cljs$spec38594 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38594, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 989, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, registry {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 248, :column 7, :end-line 248, :end-column 15, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, :name cljs.spec/registry, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns the registry map, prefer 'get-spec' to lookup a spec by name"}, t_cljs$spec38610 {:num-fields 10, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta cljs.core/ILookup}, :name cljs.spec/t_cljs$spec38610, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 1034, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta cljs.core/ILookup}}, t_cljs$spec38591 {:num-fields 4, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38591, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 989, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, rep+impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 709, :column 19, :end-line 709, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, :name cljs.spec/rep+impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 709, :end-line 709, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, deriv {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 823, :column 8, :end-line 823, :end-column 13, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/deriv, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 823, :end-line 823, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, exercise {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 1073, :column 7, :end-line 1073, :end-column 15, :arglists (quote ([spec] [spec n] [spec n overrides])), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}}, :name cljs.spec/exercise, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}, :method-params ([spec] [spec n] [spec n overrides]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1073, :end-line 1073, :max-fixed-arity 3, :fn-var true, :arglists ([spec] [spec n] [spec n overrides]), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"}, ->t_cljs$spec38256 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta38257])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38256, :variadic false, :file "out/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id kps cform meta38257]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 610, :max-fixed-arity 9, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta38257])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain-data {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 165, :column 7, :end-line 165, :end-column 19, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a path->problem-map, where problem-map has at least :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, :name cljs.spec/explain-data, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a path->problem-map, where problem-map has at least :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, tuple-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 535, :column 19, :end-line 535, :end-column 29, :skip-wiki true, :arglists (quote ([forms preds] [forms preds gfn])), :doc "Do not call this directly, use 'tuple'", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/tuple-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}, :method-params ([forms preds] [forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 535, :end-line 535, :max-fixed-arity 3, :fn-var true, :arglists ([forms preds] [forms preds gfn]), :doc "Do not call this directly, use 'tuple'"}, instrument* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 324, :column 7, :end-line 324, :end-column 18, :arglists (quote ([v]))}, :name cljs.spec/instrument*, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, multi-spec-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 488, :column 19, :end-line 488, :end-column 34, :skip-wiki true, :arglists (quote ([form mmvar retag] [form mmvar retag gfn])), :doc "Do not call this directly, use 'multi-spec'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/multi-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}, :method-params ([form mmvar retag] [form mmvar retag gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 488, :end-line 488, :max-fixed-arity 4, :fn-var true, :arglists ([form mmvar retag] [form mmvar retag gfn]), :doc "Do not call this directly, use 'multi-spec'"}, ->t_cljs$spec38243 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta38244])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38243, :variadic false, :file "out/cljs/spec.cljs", :method-params ([forms preds gfn meta38244]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 539, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta38244])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, conform {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 113, :column 7, :end-line 113, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, :name cljs.spec/conform, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, ->t_cljs$spec38263 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta38264])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38263, :variadic false, :file "out/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id kps cform meta38264]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 610, :max-fixed-arity 9, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id kps cform meta38264])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, gen* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 41, :column 4, :end-line 41, :end-column 8, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec overrides path rmap]))}, :protocol cljs.spec/Spec, :name cljs.spec/gen*, :variadic false, :file "out/cljs/spec.cljs", :end-column 8, :method-params ([spec overrides path rmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 41, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec overrides path rmap])), :doc nil}, fspec-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 1030, :column 19, :end-line 1030, :end-column 29, :skip-wiki true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, :name cljs.spec/fspec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 29, :method-params ([argspec aform retspec rform fnspec fform gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1030, :end-line 1030, :max-fixed-arity 7, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, fn-spec? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 274, :column 8, :end-line 274, :end-column 16, :private true, :arglists (quote ([m])), :doc "Fn-spec must include at least :args or :ret specs."}, :private true, :name cljs.spec/fn-spec?, :variadic false, :file "out/cljs/spec.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Fn-spec must include at least :args or :ret specs."}, ->t_cljs$spec38359 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([and-spec-impl forms preds gfn meta38360])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38359, :variadic false, :file "out/cljs/spec.cljs", :method-params ([and-spec-impl forms preds gfn meta38360]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 661, :max-fixed-arity 5, :fn-var true, :arglists (quote ([and-spec-impl forms preds gfn meta38360])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, inck {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 351, :column 8, :end-line 351, :end-column 12, :private true, :arglists (quote ([m k]))}, :private true, :name cljs.spec/inck, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, *coll-check-limit* {:name cljs.spec/*coll-check-limit*, :file "out/cljs/spec.cljs", :line 29, :column 1, :end-line 29, :end-column 34, :dynamic true, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 29, :column 16, :end-line 29, :end-column 34, :dynamic true}, :doc "The number of items validated in a collection spec'ed with 'coll'"}, get-spec {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 260, :column 7, :end-line 260, :end-column 15, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, :name cljs.spec/get-spec, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Returns spec registered for keyword/symbol/var k, or nil."}, gensub {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 218, :column 8, :end-line 218, :end-column 14, :private true, :arglists (quote ([spec overrides path rmap form]))}, :private true, :name cljs.spec/gensub, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([spec overrides path rmap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec overrides path rmap form]))}, the-spec {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 103, :column 8, :end-line 103, :end-column 16, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, :private true, :name cljs.spec/the-spec, :variadic false, :file "out/cljs/spec.cljs", :end-column 16, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, t_cljs$spec38139 {:num-fields 20, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38139, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 389, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, accept-nil? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 759, :column 8, :end-line 759, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/accept-nil?, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 759, :end-line 759, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, maybe-spec {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 92, :column 8, :end-line 92, :end-column 18, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, :private true, :name cljs.spec/maybe-spec, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, spec-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 462, :column 19, :end-line 462, :end-column 28, :skip-wiki true, :arglists (quote ([form pred gfn cpred?] [form pred gfn cpred? unc])), :doc "Do not call this directly, use 'spec'", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}}, :name cljs.spec/spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 28, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :arglists-meta (nil nil)}, :method-params ([form pred gfn cpred?] [form pred gfn cpred? unc]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 462, :end-line 462, :max-fixed-arity 5, :fn-var true, :arglists ([form pred gfn cpred?] [form pred gfn cpred? unc]), :doc "Do not call this directly, use 'spec'"}, coll-gen {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 1092, :column 7, :end-line 1092, :end-column 15, :arglists (quote ([pred init-coll])), :doc "returns a function of no args that returns a generator of\n  collections of items conforming to pred, with the same shape as\n  init-coll"}, :name cljs.spec/coll-gen, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([pred init-coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1092, :end-line 1092, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred init-coll])), :doc "returns a function of no args that returns a generator of\n  collections of items conforming to pred, with the same shape as\n  init-coll"}, amp-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 714, :column 19, :end-line 714, :end-column 27, :skip-wiki true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, :name cljs.spec/amp-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([re preds pred-forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 714, :end-line 714, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, pcat* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 681, :column 8, :end-line 681, :end-column 13, :private true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, :private true, :name cljs.spec/pcat*, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([p__38370]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 681, :end-line 681, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, alt* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 728, :column 8, :end-line 728, :end-column 12, :private true, :arglists (quote ([ps ks forms]))}, :private true, :name cljs.spec/alt*, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([ps ks forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 728, :end-line 728, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ps ks forms]))}, cat-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 693, :column 19, :end-line 693, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, :name cljs.spec/cat-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 693, :end-line 693, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, macroexpand-check {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 302, :column 8, :end-line 302, :end-column 25, :private true, :arglists (quote ([v args]))}, :private true, :name cljs.spec/macroexpand-check, :variadic false, :file "out/cljs/spec.cljs", :end-column 25, :method-params ([v args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v args]))}, reg-resolve {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 59, :column 8, :end-line 59, :end-column 19, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, :private true, :name cljs.spec/reg-resolve, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, explain-str {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 211, :column 7, :end-line 211, :end-column 18, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, :name cljs.spec/explain-str, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, with-gen {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 156, :column 7, :end-line 156, :end-column 15, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, :name cljs.spec/with-gen, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([spec gen-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, conform* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 38, :column 4, :end-line 38, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec x]))}, :protocol cljs.spec/Spec, :name cljs.spec/conform*, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc nil}, noret? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 751, :column 8, :end-line 751, :end-column 14, :private true, :arglists (quote ([p1 pret]))}, :private true, :name cljs.spec/noret?, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([p1 pret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 751, :end-line 751, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 pret]))}, rep-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 705, :column 19, :end-line 705, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, :name cljs.spec/rep-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 705, :end-line 705, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, op-describe {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 843, :column 8, :end-line 843, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/op-describe, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 843, :end-line 843, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, describe {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 151, :column 7, :end-line 151, :end-column 15, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, :name cljs.spec/describe, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, explain-1 {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 374, :column 8, :end-line 374, :end-column 17, :private true, :arglists (quote ([form pred path via in v]))}, :private true, :name cljs.spec/explain-1, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([form pred path via in v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred path via in v]))}, explain-out {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 174, :column 7, :end-line 174, :end-column 18, :arglists (quote ([ed])), :doc "prints an explanation to *out*."}, :name cljs.spec/explain-out, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "prints an explanation to *out*."}, re-gen {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 913, :column 8, :end-line 913, :end-column 14, :private true, :arglists (quote ([p overrides path rmap f]))}, :private true, :name cljs.spec/re-gen, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([p overrides path rmap f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 913, :end-line 913, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p overrides path rmap f]))}, filter-alt {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 719, :column 8, :end-line 719, :end-column 18, :private true, :arglists (quote ([ps ks forms f]))}, :private true, :name cljs.spec/filter-alt, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([ps ks forms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 719, :end-line 719, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ps ks forms f]))}, ->t_cljs$spec38591 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([regex-spec-impl re gfn meta38592])), :file nil}, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec38591, :variadic false, :file "out/cljs/spec.cljs", :method-params ([regex-spec-impl re gfn meta38592]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 989, :max-fixed-arity 4, :fn-var true, :arglists (quote ([regex-spec-impl re gfn meta38592])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec38225 {:num-fields 9, :protocols #{cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec38225, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 501, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, and-preds {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 635, :column 8, :end-line 635, :end-column 17, :private true, :arglists (quote ([x preds forms]))}, :private true, :name cljs.spec/and-preds, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([x preds forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 635, :end-line 635, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x preds forms]))}, call-valid? {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 1009, :column 8, :end-line 1009, :end-column 19, :private true, :arglists (quote ([f specs args]))}, :private true, :name cljs.spec/call-valid?, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([f specs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1009, :end-line 1009, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs args]))}, op-unform {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 789, :column 8, :end-line 789, :end-column 17, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/op-unform, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 789, :end-line 789, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, rep* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 698, :column 8, :end-line 698, :end-column 12, :private true, :arglists (quote ([p1 p2 ret splice form]))}, :private true, :name cljs.spec/rep*, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2 ret splice form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 698, :end-line 698, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p1 p2 ret splice form]))}, maybe-impl {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 747, :column 19, :end-line 747, :end-column 29, :skip-wiki true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, :name cljs.spec/maybe-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 29, :method-params ([p form]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 747, :end-line 747, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, pcat {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 691, :column 8, :end-line 691, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/pcat, :variadic true, :file "out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 691, :end-line 691, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, explain* {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 40, :column 4, :end-line 40, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec path via in x]))}, :protocol cljs.spec/Spec, :name cljs.spec/explain*, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 40, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x])), :doc nil}, validate-fn {:protocol-inline nil, :meta {:file "/Users/amiralirajan/Projects/mokepon/out/cljs/spec.cljs", :line 1020, :column 8, :end-line 1020, :end-column 19, :private true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, :private true, :name cljs.spec/validate-fn, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([f specs iters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1020, :end-line 1020, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec, cljs.spec cljs.spec, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen}, :cljs.analyzer/constants {:seen #{form tag :args :req-un :opt-un cljs.spec/keys unc :cljs.spec/invalid cljs.spec/spec :p2 :ret :gfn :pred-exprs vector? map :shrunk :fn regex-spec-impl predx :rep+ :cljs.spec/amp cljs.core/= :opt-keys aform :pred dval :splice and-spec-impl forms opt argspec :else meta38611 :gen :cljs.spec/k meta38592 map-spec-impl :ks cljs.core/count req-un opt-un :cljs.spec/args :_ p1__38621# :maybe :raw meta38257 :via :as zipmap :req-specs gfn fnspec cljs.spec/multi-spec p__38136 v map? meta38605 pred-exprs keys-pred cpred? or-spec-impl argm fn :val fform opt-keys pred :cljs.spec/alt :skip-wiki meta38264 meta38363 :p1 cljs.core/zipmap :cljs.spec/nil % :cljs.spec/pcat cljs.core/map cljs.spec/conformer method cljs.spec/? req-specs cljs.spec/* re kps :reason preds cljs.spec/+ :req cljs.core/constantly :cljs.spec/name :cljs.spec/unknown :keys :cljs.spec/recursion-limit meta38595 meta38244 :var fn* cljs.spec/alt p1__38622# meta38226 :id fspec-impl :cljs.spec/rep :smallest :specs keys->specs mmvar :req-keys retag k cljs.core/fn :cljs.spec/any retspec :cljs.spec/accept :opt-specs cljs.spec/and cljs.spec/cat rform ifn? :pred-forms req keys cljs.spec/or quote meta38360 :arglists map__38167 meta38140 id map__38137 cljs.spec/fspec :doc specs cljs.spec/tuple meta38211 req-keys apply :cljs.spec/op :cljs.spec/v cform :wrapped clojure.spec/& opt-specs :cljs.spec/problems :forms :ps k->s meta38170 :cljs.spec/kvs->map :in :accept :opt cljs.spec.impl.gen/any pred-forms}, :order [:cljs.spec/name :cljs.spec/op :cljs.spec/unknown fn % :else :cljs.spec/problems :pred :val :reason :via :in :cljs.spec/recursion-limit :args :ret :cljs.spec/invalid :cljs.spec/args :var :specs :raw :wrapped :opt :req-un :opt-un :gfn :pred-exprs :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec/keys opt map-spec-impl :skip-wiki :arglists :doc quote :keys :as req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms gfn argm p__38136 keys-pred keys->specs id map__38137 k->s meta38140 map__38167 meta38170 form pred cpred? unc meta38211 method cljs.spec/multi-spec mmvar retag predx dval tag meta38226 vector? cljs.core/= cljs.core/count cljs.spec/tuple forms preds meta38244 cljs.spec/or or-spec-impl keys kps cform meta38257 meta38264 cljs.spec/and and-spec-impl meta38360 meta38363 :cljs.spec/accept :ps :ks :forms :rep+ :cljs.spec/pcat :p2 :splice :id :cljs.spec/rep :p1 cljs.spec/* :cljs.spec/amp :cljs.spec/alt :cljs.spec/nil :maybe clojure.spec/& cljs.spec/+ cljs.spec/cat :_ cljs.spec/? cljs.spec/alt :accept regex-spec-impl re meta38592 meta38595 :fn :smallest :shrunk apply ifn? cljs.spec/fspec fspec-impl argspec aform retspec rform fnspec fform specs meta38605 meta38611 :cljs.spec/any cljs.spec/spec cljs.core/constantly :gen cljs.spec.impl.gen/any :cljs.spec/kvs->map cljs.spec/conformer fn* p1__38621# cljs.core/zipmap cljs.core/map :cljs.spec/k :cljs.spec/v p1__38622# cljs.core/fn k v zipmap map]}, :doc nil}